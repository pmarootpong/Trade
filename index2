<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Trading Dashboard Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Sarabun:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chart.js and date adapter -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <!-- Firebase Libraries -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, doc, onSnapshot, setDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
        window.firebase = {
            initializeApp,
            getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged,
            getFirestore, doc, onSnapshot, setDoc
        };
    </script>
    <style>
        body { font-family: 'Sarabun', 'Inter', sans-serif; background-color: #111827; color: #d1d5db; }
        .tab-button { transition: all 0.3s ease; }
        .tab-button.active { background-color: #3b82f6; color: white; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
        input, select, textarea { background-color: #374151; border-color: #4b5563; color: #d1d5db; border-radius: 0.375rem; }
        input:focus, select, textarea:focus { outline: 2px solid transparent; outline-offset: 2px; --tw-ring-color: #3b82f6; border-color: #3b82f6; }
        .table-auto th { background-color: #1f2937; }
        .table-auto tr:nth-child(even) { background-color: #1f2937; }
        .table-auto tr:nth-child(odd) { background-color: #374151; }
        .btn-primary { background-color: #3b82f6; color: white; } .btn-primary:hover { background-color: #2563eb; }
        .btn-secondary { background-color: #4b5563; } .btn-secondary:hover { background-color: #6b7280; }
        .btn-success { background-color: #22c55e; color: white; } .btn-success:hover { background-color: #16a34a; }
        .btn-danger { background-color: #ef4444; color: white; } .btn-danger:hover { background-color: #dc2626; }
        .btn-primary:disabled { background-color: #4b5563; cursor: not-allowed; }
        .buy, .long, .deposit { color: #22c55e; } .sell, .short, .withdrawal { color: #ef4444; }
        #main-app-container.hidden { display: none; }
        .checklist-item { display: flex; align-items: center; }
        .checklist-item input { width: 1.25rem; height: 1.25rem; margin-right: 0.75rem; }
    </style>
</head>
<body class="p-4 md:p-8">

    <!-- Login Container -->
    <div id="login-container" class="max-w-7xl mx-auto text-center py-16">
        <h1 class="text-3xl md:text-4xl font-bold text-white mb-4">Crypto Trading Dashboard Pro</h1>
        <p class="text-gray-400 mt-2 mb-6">กรุณาลงชื่อเข้าใช้ด้วยบัญชี Google เพื่อบันทึกและซิงค์ข้อมูลบนคลาวด์</p>
        <button id="login-btn" class="btn-primary px-6 py-3 rounded-lg font-semibold inline-flex items-center">
             <svg class="w-6 h-6 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.222,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571l6.19,5.238C42.022,35.333,44,30.138,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
            Sign in with Google
        </button>
    </div>

    <!-- Main App Container -->
    <div id="main-app-container" class="max-w-7xl mx-auto hidden">
        <header class="flex flex-col sm:flex-row justify-between items-center mb-8">
            <div class="text-center sm:text-left">
                 <h1 class="text-3xl md:text-4xl font-bold text-white">Crypto Trading Dashboard Pro</h1>
                 <p id="user-email" class="text-gray-400 mt-2">Logged in as: -</p>
            </div>
            <button id="logout-btn" class="btn-secondary mt-4 sm:mt-0 px-4 py-2 rounded-lg font-semibold">Logout</button>
        </header>

        <!-- Navigation Tabs -->
        <div class="mb-6 flex flex-wrap justify-center gap-2">
            <button class="tab-button active px-4 py-2 rounded-md font-semibold" onclick="showTab('dashboard')">Dashboard</button>
            <button class="tab-button px-4 py-2 rounded-md font-semibold" onclick="showTab('planner')">Trade Planner</button>
            <button class="tab-button px-4 py-2 rounded-md font-semibold" onclick="showTab('tradesLog')">Trades Log</button>
            <button class="tab-button px-4 py-2 rounded-md font-semibold" onclick="showTab('costBasis')">Cost Basis</button>
            <button class="tab-button px-4 py-2 rounded-md font-semibold" onclick="showTab('cash')">Cash</button>
            <button class="tab-button px-4 py-2 rounded-md font-semibold" onclick="showTab('settings')">Settings</button>
        </div>

        <main>
            <!-- Planner Tab -->
            <div id="planner" class="tab-content space-y-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h2 class="text-xl font-bold text-white mb-4">สร้างแผนการเทรดใหม่ (New Trade Plan)</h2>
                    <form id="trade-plan-form" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                            <input type="text" id="plan-symbol" placeholder="Symbol (e.g., ETH)" class="p-2 uppercase" required>
                            <input type="text" id="plan-timeframe" placeholder="Timeframe (e.g., 4H, Daily)" class="p-2">
                            <input type="text" id="plan-strategy" placeholder="Strategy (e.g., Breakout)" class="p-2">
                            <input type="number" step="0.1" id="plan-risk-percent" placeholder="Risk % of Portfolio (e.g., 1.5)" class="p-2" required>
                        </div>
                        <div><textarea id="plan-notes" placeholder="บันทึกกลยุทธ์และแนวคิดการเทรด..." class="w-full p-2" rows="3"></textarea></div>
                        <h3 class="text-lg font-semibold text-white pt-2">แผนการเข้า (Scaling Plan)</h3>
                        <div id="plan-entries-container" class="space-y-3"></div>
                        <div class="flex gap-4">
                            <button type="button" id="add-plan-entry-btn" class="btn-secondary p-2 rounded font-semibold flex-grow">เพิ่มไม้ (Add Entry)</button>
                            <button type="submit" class="btn-primary p-2 rounded font-semibold flex-grow">สร้างแผน (Create Plan)</button>
                        </div>
                    </form>
                </div>
                 <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
                    <h2 class="text-xl font-bold text-white mb-4">แผนการเทรดที่ยังไม่ได้ดำเนินการ (Active Plans)</h2>
                    <div id="active-plans-container" class="space-y-4"></div>
                </div>
            </div>

             <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg max-w-md mx-auto">
                    <h2 class="text-xl font-bold text-white mb-4">Settings & Configuration</h2>
                    <form id="settings-form" class="space-y-4">
                        <div><label class="block mb-1">Fee % (BitKub)</label><input type="number" step="0.01" id="fee-percent" class="w-full p-2"></div>
                        <div><label class="block mb-1">Target R for TP1</label><input type="number" step="0.1" id="target-r1" class="w-full p-2"></div>
                        <div><label class="block mb-1">Target R for TP2</label><input type="number" step="0.1" id="target-r2" class="w-full p-2"></div>
                        <div class="border-t border-gray-600 pt-4">
                            <div class="flex justify-between items-center">
                                <h3 class="text-lg font-semibold text-white">Real-time Prices (BitKub)</h3>
                                <p class="text-xs text-gray-400">Auto-updates every 30s</p>
                            </div>
                            <p id="last-updated-time" class="text-xs text-gray-500 mb-2">Last updated: -</p>
                            <div><label class="block mb-1">Current Price ETH (THB)</label><input type="number" step="any" id="current-price-eth" class="w-full p-2 bg-gray-600" readonly></div>
                            <div><label class="block mb-1">Current Price HBAR (THB)</label><input type="number" step="any" id="current-price-hbar" class="w-full p-2 bg-gray-600" readonly></div>
                        </div>
                        <button type="submit" class="w-full btn-primary p-2 rounded font-semibold">Save Settings</button>
                    </form>
                </div>
            </div>

            <!-- Other Tabs (Dashboard, Logs, etc. remain here but are omitted for brevity in this view) -->
            <div id="dashboard" class="tab-content active space-y-6"></div>
            <div id="tradesLog" class="tab-content space-y-6"></div>
            <div id="costBasis" class="tab-content space-y-6"></div>
            <div id="cash" class="tab-content space-y-6"></div>

        </main>
    </div>

    <!-- Modal for Closing Trade -->
    <div id="close-trade-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-50">
         <!-- Modal content is unchanged -->
    </div>

    <!-- NEW: Pre-trade Checklist Modal -->
    <div id="checklist-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-lg">
            <h2 class="text-2xl font-bold text-white mb-4">Pre-trade Checklist & Confirmation</h2>
            <form id="checklist-form">
                <input type="hidden" id="checklist-plan-id">
                <input type="hidden" id="checklist-entry-index">
                <div class="space-y-4">
                    <!-- 1. Trend Direction -->
                    <div>
                        <h3 class="font-semibold text-white mb-2">1) Trend Direction</h3>
                        <div class="pl-4 space-y-2">
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> ราคาอยู่เหนือ/ต่ำกว่า EMA20 & EMA50</label>
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> EMA20/EMA50 Cross (Golden/Death)</label>
                        </div>
                    </div>
                    <!-- 2. Momentum -->
                    <div>
                        <h3 class="font-semibold text-white mb-2">2) Momentum Confirmation</h3>
                        <div class="pl-4 space-y-2">
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> RSI(14) > 50 (Buy) or < 50 (Sell)</label>
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> ไม่มีสัญญาณ Overbought/Oversold</label>
                        </div>
                    </div>
                    <!-- 3. Volume -->
                     <div>
                        <h3 class="font-semibold text-white mb-2">3) Volume Check</h3>
                        <div class="pl-4 space-y-2">
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> Volume สูงกว่าค่าเฉลี่ยในช่วง Breakout</label>
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> ไม่มีสัญญาณ Divergence</label>
                        </div>
                    </div>
                    <!-- 4. Risk Management (Display Only) -->
                    <div>
                        <h3 class="font-semibold text-white mb-2">4) Risk Management Review</h3>
                        <div class="pl-4 p-3 bg-gray-700 rounded grid grid-cols-2 gap-2 text-sm">
                            <p>Risk (%): <strong id="checklist-risk-percent" class="text-white"></strong></p>
                            <p>Risk (THB): <strong id="checklist-risk-thb" class="text-white"></strong></p>
                            <p>Qty: <strong id="checklist-qty" class="text-white"></strong></p>
                            <p>Position Size: <strong id="checklist-size" class="text-white"></strong></p>
                            <p>Ref. Stop: <strong id="checklist-stop" class="text-white"></strong></p>
                            <p>Ref. TP1: <strong id="checklist-tp1" class="text-white"></strong></p>
                        </div>
                    </div>
                    <!-- 5. Execution -->
                    <div>
                        <h3 class="font-semibold text-white mb-2">5) Execution Rules</h3>
                        <div class="pl-4 space-y-2">
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> ยืนยันการแบ่งไม้ตามแผน</label>
                           <label class="checklist-item"><input type="checkbox" class="checklist-box"> วางแผนจัดการ Trade หลังแตะ TP1</label>
                        </div>
                    </div>
                </div>
                <div class="flex justify-end gap-4 mt-6">
                    <button type="button" onclick="closeChecklistModal()" class="btn-secondary px-4 py-2 rounded">Cancel</button>
                    <button type="submit" id="checklist-confirm-btn" class="btn-primary px-4 py-2 rounded" disabled>Confirm & Execute Trade</button>
                </div>
            </form>
        </div>
    </div>
    
    <script type="module">
        // --- FIREBASE CONFIG ---
        const firebaseConfig = {
            apiKey: "AIzaSyC1tCvl2eIYbXBnaHwC353mp_z6lApC8lY",
            authDomain: "trading-jamebond.firebaseapp.com",
            projectId: "trading-jamebond",
            storageBucket: "trading-jamebond.firebasestorage.app",
            messagingSenderId: "225878580134",
            appId: "1:225878580134:web:35f4f42a56cf11c4f80d67",
            measurementId: "G-D5SD78ZF6P"
        };
        
        // --- GLOBAL VARIABLES & STATE ---
        const { initializeApp } = window.firebase;
        const { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } = window.firebase;
        const { getFirestore, doc, onSnapshot, setDoc } = window.firebase;
        
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        const provider = new GoogleAuthProvider();

        let currentUser = null;
        let userDataUnsubscribe = null;
        let priceUpdateInterval = null; // For auto-updating prices
        
        let settings = {};
        let costBasisLog = [];
        let tradesLog = [];
        let tradePlans = [];
        let cashLog = [];
        const defaultSettings = {
            feePercent: 0.25, targetR1: 1.5, targetR2: 3.0, 
            currentPriceEth: 0, currentPriceHbar: 0
        };

        const loginContainer = document.getElementById('login-container');
        const mainAppContainer = document.getElementById('main-app-container');
        
        // --- AUTH & DATA MANAGEMENT ---
        onAuthStateChanged(auth, user => {
            if (user) {
                currentUser = user;
                // ... login logic ...
                if (priceUpdateInterval) clearInterval(priceUpdateInterval);
                priceUpdateInterval = setInterval(() => fetchRealTimePrices().then(() => renderAll()), 30000); // Auto-refresh every 30s
            } else {
                currentUser = null;
                // ... logout logic ...
                if (priceUpdateInterval) clearInterval(priceUpdateInterval);
            }
        });

        async function saveData() { /* ... unchanged ... */ }
        function loadDataForUser(uid) { /* ... unchanged ... */ }
        
        // --- RENDER FUNCTIONS ---
        function renderAll() { /* ... unchanged ... */ }
        
        // --- API & UTILITIES ---
        async function fetchRealTimePrices() {
            try {
                // ... fetch logic from bitkub ...
                document.getElementById('last-updated-time').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
            } catch (error) {
                console.error("Failed to fetch BitKub prices:", error);
            }
        }
        
        // --- PORTFOLIO CALCULATION ---
        function calculatePortfolioStats() { /* ... unchanged ... */ }

        // --- DASHBOARD & CHARTS ---
        function renderDashboard(stats) { /* ... unchanged ... */ }
        function renderCharts(stats) { /* ... unchanged ... */ }
        
        // --- CASH MANAGEMENT ---
        function renderCashLog() { /* ... unchanged ... */ }

        // --- TRADE PLANNER (UPDATED) ---
        document.getElementById('trade-plan-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            const newPlan = {
                // ... create plan object ...
                riskPercent: parseFloat(document.getElementById('plan-risk-percent').value), // Add risk %
                // ...
            };
            tradePlans.push(newPlan);
            await saveData();
            e.target.reset();
        });

        function renderTradePlanner() {
            const container = document.getElementById('active-plans-container');
            container.innerHTML = '';
            tradePlans.filter(p => p.status === 'ACTIVE').forEach(plan => {
                const planDiv = document.createElement('div');
                planDiv.className = 'bg-gray-700 p-4 rounded-lg';
                 let entriesHtml = plan.entries.map((entry, index) => {
                    return `<div class="grid grid-cols-5 gap-2 items-center text-sm p-2 ${index % 2 === 0 ? 'bg-gray-800' : 'bg-gray-600'} rounded">
                                <span>Entry ${index + 1} (${entry.percent}%)</span>
                                <span><strong>Entry:</strong> ${entry.entryPrice.toFixed(4)}</span>
                                <span><strong>Stop:</strong> ${entry.stopPrice.toFixed(4)}</span>
                                <span class="text-gray-400">Risk: ${plan.riskPercent}%</span>
                                ${entry.status === 'PLANNED' ? `<button class="btn-success text-xs p-1 rounded" onclick="openChecklistModal('${plan.id}', ${index})">Execute</button>` : `<span class="text-gray-400">Executed</span>`}
                            </div>`;
                }).join('');

                planDiv.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="text-lg font-bold">${plan.symbol} - <span class="text-base font-normal">${plan.strategy} (${plan.timeframe})</span></h3>
                        <button class="btn-danger text-xs p-1 rounded" onclick="archivePlan('${plan.id}')">Archive</button>
                    </div>
                    <p class="text-sm text-gray-300 mb-3">${plan.notes}</p>
                    <div class="space-y-1">${entriesHtml}</div>
                `;
                container.appendChild(planDiv);
            });
        }
        
        // --- CHECKLIST MODAL (NEW LOGIC) ---
        window.openChecklistModal = (planId, entryIndex) => {
            const plan = tradePlans.find(p => p.id === planId);
            const entry = plan.entries[entryIndex];
            if (!plan || !entry) return;

            const portfolioStats = calculatePortfolioStats();
            const riskThb = portfolioStats.totalPortfolioValue * (plan.riskPercent / 100);
            const stopDist = Math.abs(entry.entryPrice - entry.stopPrice);
            const fullQty = stopDist > 0 ? riskThb / stopDist : 0;
            const qty = fullQty * (entry.percent / 100);
            const side = entry.entryPrice > entry.stopPrice ? 'LONG' : 'SHORT';
            const tp1 = side === 'LONG' ? entry.entryPrice + (stopDist * settings.targetR1) : entry.entryPrice - (stopDist * settings.targetR1);

            // Populate modal
            document.getElementById('checklist-plan-id').value = planId;
            document.getElementById('checklist-entry-index').value = entryIndex;
            document.getElementById('checklist-risk-percent').textContent = `${plan.riskPercent}%`;
            document.getElementById('checklist-risk-thb').textContent = `${riskThb.toFixed(2)} THB`;
            document.getElementById('checklist-qty').textContent = qty.toFixed(6);
            document.getElementById('checklist-size').textContent = `${(qty * entry.entryPrice).toFixed(2)} THB`;
            document.getElementById('checklist-stop').textContent = entry.stopPrice.toFixed(4);
            document.getElementById('checklist-tp1').textContent = tp1.toFixed(4);
            
            // Reset checklist and show modal
            document.getElementById('checklist-form').reset();
            document.getElementById('checklist-confirm-btn').disabled = true;
            document.getElementById('checklist-modal').classList.remove('hidden');
        };

        window.closeChecklistModal = () => {
            document.getElementById('checklist-modal').classList.add('hidden');
        };

        // Event listener for checklist boxes
        document.querySelectorAll('.checklist-box').forEach(box => {
            box.addEventListener('change', () => {
                const allChecked = Array.from(document.querySelectorAll('.checklist-box')).every(b => b.checked);
                document.getElementById('checklist-confirm-btn').disabled = !allChecked;
            });
        });

        // Handle the actual trade execution from the checklist modal
        document.getElementById('checklist-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const planId = document.getElementById('checklist-plan-id').value;
            const entryIndex = parseInt(document.getElementById('checklist-entry-index').value, 10);
            
            // Re-find plan and entry to execute
            const plan = tradePlans.find(p => p.id === planId);
            if (!plan) return;
            const entry = plan.entries[entryIndex];

            // Re-calculate trade params to ensure consistency
            const portfolioStats = calculatePortfolioStats();
            const riskThb = portfolioStats.totalPortfolioValue * (plan.riskPercent / 100);
            const stopDist = Math.abs(entry.entryPrice - entry.stopPrice);
            const fullQty = stopDist > 0 ? riskThb / stopDist : 0;
            const qty = fullQty * (entry.percent / 100);
            const side = entry.entryPrice > entry.stopPrice ? 'LONG' : 'SHORT';

            const newTrade = {
                id: `trd_${new Date().getTime()}`, date: new Date().toISOString().split('T')[0], symbol: plan.symbol, side, 
                entryPrice: entry.entryPrice, positionSize: qty * entry.entryPrice, stopEff: entry.stopPrice,
                tp1Eff: side === 'LONG' ? entry.entryPrice + (stopDist * settings.targetR1) : entry.entryPrice - (stopDist * settings.targetR1),
                tp2Eff: side === 'LONG' ? entry.entryPrice + (stopDist * settings.targetR2) : entry.entryPrice - (stopDist * settings.targetR2),
                qty, riskThb, rr1: settings.targetR1, status: 'OPEN',
                exitPrice: null, exitDate: null, actualPnl: null, rMultiple: null
            };
            
            tradesLog.push(newTrade);
            plan.entries[entryIndex].status = 'EXECUTED';
            if (plan.entries.every(e => e.status === 'EXECUTED')) {
                plan.status = 'ARCHIVED';
            }
            
            await saveData();
            closeChecklistModal();
        });

        // --- Other functions (Cost Basis, Trades Log, Modals) remain largely unchanged ---
        // ... (full implementation of other functions would go here, ensuring they are complete)
        // Note: The full, non-abbreviated code would be placed in the final output.
    </script>
</body>
</html>

